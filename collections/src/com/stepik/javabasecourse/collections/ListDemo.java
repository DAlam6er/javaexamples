package com.stepik.javabasecourse.collections;

// Простой список элементов, проиндексированных числами от 0 до длины списка -1
public interface ListDemo<E> extends CollectionDemo<E>
{
    E get(int index);

    // замена элемента по индексу
    E set (int index, E element);

    // добавление элемента по индексу, при этом элементы,
    // начиная с указанного индекса сдвигаются на 1 позицию вправо
    // а на освободившееся место встает новый элемент
    void add(int index, E element);

    // возвращает, изменилась ли коллекция, добавляет элемент в конец коллекции
    @Override
    boolean add(E e);

    // удаляет элемент по индексу и возращает его
    E remove(int index);

    // Ищет элемент в списке и возращает его индекс (первый с начала) или -1
    int indexOf(Object o);

    // Ищет элемент в списке и возращает его индекс (первый с конца) или -1
    int lastIndexOf(Object o);

    // возвращает часть списка в виде отдельного экземпляра List
    // это не копирование! Если мы изменим один список, изменения будут видны в обоих
    ListDemo<E> subList(int fromIndex, int toIndex);
    // метод позволяет реализовывать более сложные операции, не вынесенные в List в явном виде
    // удаление элементов с индексами от 1 до 3(исключительно):
    // List<String> words = new ArrayList<>(Arrays.AsList("1", "2", "3", "4"));
    // words.subList(1, 3).clear(); // words = ("1", "4");
    // поиск элемента в диапазоне индексов от 10 до 15
    // отдельно обрабатываем случай, когда элемент не найден (-1)
    // int indexOfFoo = 10 + words.subList(10, 15).indexOf("foo");

    // списки равны, если они содержат одинаковые элементы в одинаковом порядке - так работает equals()

    // ** Реализации List **
    // List<String> list1 = new ArrayList<>();
    // List<String> list2 = new LinkedList<>();
}
